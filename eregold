#!/bin/bash

set -e

isValuePresent () {
  present='false'
  for el in $2; do
      if [[ "$el" == "$1" ]];
      then
          present=true;
      fi
  done
  return 0
}

allowedBackendValues=("none" "01" "02" "03" "04" "05")
allowedFrontendValues=("none" "angular" "react")

backendPaths=(
  ["01"]="01-basic-web-app"
  ["02"]="02-stateless-web-app"
  ["03"]="03-web-app-plus-monolith-middleware"
  ["04"]="04-web-app-plus-microservice-middleware"
  ["05"]="05-microservices-plus-kafka-transactions-system"
)

helpText="
  Usage:
     ./eregold [OPTIONS] [build|up|down|help]
  
  Commands:
     build    runs the 'build-image.sh' script building final Docker image
              for selected frontend and backend options

     up       runs 'docker-compose up' for selected frontend and backend options

     down     runs 'docker-compose down' for selected frontend and backend options


  Options:
     -b       set the backend version to run, default is none,
              possible values: none | 01 | 02 | 03 | 04 | 05

     -f       set the frontend version to run, default is none,
              possible values: none | angular | react (WIP)
"

if [ "$1" = "help" ] 
then
    echo "  Eregold CLI command"
    echo "$helpText"
    exit 0
fi

backend="none"
frontend="none"

while getopts b:f: flag
do
    case "${flag}" in
        b) backend=${OPTARG};;
        f) frontend=${OPTARG};;
        *) echo "$helpText"; exit 1;;
    esac
done
shift "$(($OPTIND -1))"

isValuePresent "$backend" "${allowedBackendValues[*]}"
backMatched=$present

if [[ "$backMatched" == 'false' ]];
then
  echo "Invalid backend value: $backend, expected one of: ${allowedBackendValues[*]}";
  exit 1;
fi

isValuePresent "$frontend" "${allowedFrontendValues[*]}"
frontMatched=$present

if [[ "$frontMatched" == 'false' ]];
then
  echo "Invalid frontend value: $frontend, expected one of: ${allowedFrontendValues[*]}";
  exit 1;
fi

if [[ "$frontend" == 'none' ]] && [[ "$backend" == 'none' ]]
then
  echo "You didn't select backend nor frontend for command. Exiting."
  exit 0
fi

if [[ $1 == 'build' ]]
then
  echo "Building images: for backend $backend and frontend $frontend"
  if [[ $backend != 'none' ]]
  then
    ./"${backendPaths[$backend]}"/build-image.sh
  fi
  if [[ $frontend != 'none' ]]
  then
    ./ui/"$frontend"/build-image.sh
  fi
elif [[ $1 == 'up' ]];
then
  echo "Running backend $backend and frontend $frontend"
  if [[ $backend != 'none' ]]
  then
    docker-compose -f ./"${backendPaths[$backend]}"/docker-compose.yml up -d
  fi
  if [[ $frontend != 'none' ]]
  then
    docker-compose -f ./ui/"$frontend"/docker-compose.yml up -d
  fi
elif [[ $1 == 'down' ]];
then
  echo "Stopping backend $backend and frontend $frontend"
  if [[ $backend != 'none' ]]
  then
    docker-compose -f ./"${backendPaths[$backend]}"/docker-compose.yml down
  fi
  if [[ $frontend != 'none' ]]
  then
    docker-compose -f ./ui/"$frontend"/docker-compose.yml down
  fi
else
  echo "Invalid command: $1, can be 'build', 'up', 'down' or 'help'"
  exit 1
fi

exit 0
